/*
 * ExpIntegralTest.cpp
 *
 *  Created on: 25 Jul 2017
 *      Author: daniel
 */

#include "ExpIntegral.h"
#include <iostream>
#include "iomanip"
#include <math.h>
#include "nll.h"
#include "MinloInfo.h"
#include "pdf.h"
#include "sudakovs.h"

double ref[]={-1.622812813969276675,
   -0.82176058790240031565,
   -0.30266853926582588447,
   0.10476521861932479323,
   0.45421990486317357992,
   0.76988128993735943709,
   1.0649071946242905406,
   1.3473965482123259381,
   1.6228117136968674413,
   1.8951178163559367555,
   2.1673782795634028236,
   2.4420922851926516397,
   2.7213988802320235659,
   3.0072074641506455401,
   3.301285449129797838,
   3.6053199490194692087,
   3.9209632013549042918,
   4.2498675574879335041,
   4.5937136869535853693,
   4.9542343560018901634,
   5.3332353596559018613,
   5.732614699814380577,
   6.1543807913335074307,
   6.6006702763505393137,
   7.0737658945786007119,
   7.5761147697875986499,
   8.1103474152220367919,
   8.6792977238091652597,
   9.2860241865663481132,
   9.933832570625416558,
   10.626300284109806762,
   11.367302656968729588,
   12.161041373622854911,
   13.012075304140445987,
   13.925353995152335292,
   14.906254099537090473,
   15.960619044916866176,
   17.094802265160900656,
   18.315714346443033718,
   19.630874470056220023,
   21.048466568323181574,
   22.577400647782083188,
   24.227379775641231861,
   26.008973271605145978,
   27.933696697939580629,
   30.014099296475696571,
   32.263859582612755433,
   34.697889873775327627,
   37.33245060378098077,
   40.185275355803177455,
   43.275707635761454999,
   46.62485050579674777,
   50.255730304830232016,
   54.193475800979147711,
   58.465514249823944482,
   63.101785974299261488,
   68.134979237537994612,
   73.600787350674862872,
   79.538190144887570844,
   85.989762142439204804,
   93.002009986963687518,
   100.62574194066087009,
   108.91647252758544179,
   117.93486570018188733,
   127.74722023322596523,
   138.42600140822643241,
   150.05042344524406352,
   162.70708757143141484,
   176.4906810901576568,
   191.50474333550139595,
   207.86250496872262775,
   225.68780770106381042,
   245.11611221637410709,
   266.29560282363715923,
   289.38839820014460792,
   314.57187849808357843,
   342.0401400887054138,
   372.00559031781577191,
   404.7006958537438071,440.379899534838269,
   479.32172207958039799,
   521.83106662143305398,
   568.24174578666916459,
   618.91925296214420815,
   674.26380151833714543,
   734.71365807971101555,
   800.74879849012427221,
   872.89491792828447103,
   951.72782971194956941,
   1037.8782907170895877,
   1132.0372950595774578,
   1234.9618817752216422,
   1347.4815067254052536,
   1470.5050338901863019,
   1605.0284066323389732,
   1752.1430654727381149,
   1913.0451854627690412,
   2089.0458134314209152,
   2281.5819932875372182,
   2492.2289762418777591,
   2722.7136223567407664,
   2974.9291103181702201,
   3250.9510838509951604,
   3553.0553758632182134,
   3883.7374653269688464,
   4245.7338372030435081,
   4642.0454325320819973,
   5075.9633942984638675,
   5551.0973349888793032,
   6071.406374098611508,6641.233218385440505,
   7265.3415846543439064,
   7948.957294518459777,
   8697.8134031899555824,
   9518.1997602020418535,
   10417.017439373237826,
   11401.838518652267464,
   12480.971738117270688,
   13663.534616776051752,
   14959.532666397528852,
   16379.946403918358933,
   17936.826933584883073,
   19643.400946538315092,
   21514.186069722718091,
   23565.117588552335743,
   25813.687669555096619,
   28279.098321134350971,
   30982.429453675249977,
   33946.823535581391767,
   37197.688490689035604,
   40762.920646221005645,
   44673.149720496498985,
   48962.008037641573504,
   53666.426374347362346,
   58826.959083278830425,64488.1414012246406,
   70698.882139895605317,
   77512.895276063121529,
   84989.174308382684251,
   93192.513633965371299,
   102194.08162205732302,
   112072.05052893215739,
   122912.28891155119669,
   134809.12276238650663,
   147866.17220918827256,
   162197.27130708566283,
   177927.47920248449683,
   195194.19177563943724,
   214148.36377909833177,
   234955.85249076830358,257798.895002301846,
   282877.73247593369722,
   310412.39603691844434,
   340644.67043654548867,
   373840.25323579391186,
   410291.12903684170164,
   450318.18024516033459,
   494274.0579967478868,
   542546.33925293088154,
   595560.99867083700185,
   653786.22672503944198,
   717736.62871134409173,
   787977.84273623496293,
   865131.61861703870598,
   949881.40382356416295,
   1.0429784872205126176e6,
   1.1452487564639386779e6,
   1.2576001305113702441e6,
   1.3810307348755029229e6,
   1.5166378940425168844e6,
   1.6656280229506103127e6,
   1.8293275076512120839e6,
   2.0091946743303964713e6,
   2.2068329558348085755e6,
   2.4240053758168952054e6,
   2.6626504826896909829e6,
   2.9248998788733376817e6,
   3.2130975054466917893e6,
   3.529820858422989117e6,
   3.877904330597443503e6,
   4.2604648924307705303e6,
   4.6809303469164364222e6,
   5.1430704170296844039e6,
   5.6510309503919408495e6,
   6.2093715544460513866e6,
   6.8231070069913316872e6,
   7.4977528216648886e6,
   8.2393753861989077182e6,
   9.0546471333870290513e6,
   9.95090725104684476e6,
   1.0936228488299778325e7,
   1.2019490671677502571e7,
   1.3210461606426932688e7,
   1.4519886106497810049e7,
   1.5959583971690263599e7,
   1.7542557813010860312e7,
   1.9283111718201470945e7,
   2.1196981849510454264e7,
   2.3301480176000500463e7,
   2.561565266405658882e7
};


double refHF[]={1.0126878230750759885,
   1.0257621200172865439,
   1.0392397759556010172,
   1.0531385752683348705,
   1.0674772558643930387,
   1.0822755670366704014,
   1.0975543311380130161,
   1.1133355093485632968,
   1.1296422718231392215,
   1.1464990725286428079,
   1.163931729104476338,
   1.1819675081036957037,
   1.2006352159992888092,
   1.2199652963686846344,
   1.2399899337005390594,
   1.2607431643011839345,
   1.2822609948140576702,
   1.3045815289041659596,
   1.3277451027013742464,
   1.3517944296413516661,
   1.3767747553915318022,
   1.402734023601812613,
   1.4297230532761936166,
   1.4577957286224754805,
   1.4870092023028856301,
   1.5174241130794332128,
   1.5491048189243598337,
   1.5821196467486960255,
   1.6165411599911524597,
   1.6524464454059056462,
   1.6899174204918611112,
   1.7290411631183220214,
   1.7699102650233396625,
   1.8126232109921127882,
   1.8572847856644361567,
   1.9040065100732421296,
   1.9529071101816734147,
   2.0041130198648892276,
   2.0577589209760464283,
   2.1139883233448097036,
   2.1729541877826297875,
   2.2348195954132948858,
   2.299758466911435826,
   2.3679563355174072119,
   2.4396111780060726633,
   2.5149343081214421854,
   2.5941513373509595897,
   2.6775032083048133066,
   2.7652473063894359499,
   2.8576586559230699624,
   2.9550312073378425813,
   3.0576792226503978351,
   3.1659387669652332364,
   3.2801693144052371513,
   3.4007554775465939957,
   3.5281088701746424954,
   3.6626701139782412949,
   3.8049110006679332928,
   3.955336821943371349,
   4.1144888807542277812,
   4.2829471984028435033,
   4.4613334332334421078,
   4.6503140279497297096,
   4.8506036040086956106,5.06296862306273694,
   5.2882313370749750099,
   5.5272740505248132996,
   5.7810437200643633981,
   6.0505569190943321842,
   6.3369051970144483798,
   6.6412608653838674646,
   6.9648832459179280952,
   7.3091254181672952751,
   7.6754415078936562626,
   8.0653945605942014751,
   8.4806650483584701874,
   8.9230600622911605709,
   9.3945232471308128458,
   9.8971455394669140504,
   10.433176776139622966,
   11.00503824503252702,
   11.615336256578300858,
   12.266876820931926862,
   12.962681522972059021,
   13.706004695118001691,
   14.500351996451872647,
   15.349500515871857385,
   16.257520527037291777,
   17.228799033769573375,
   18.268065256420734055,
   19.380418222596795143,
   20.571356639616011889,
   21.846811241291052383,
   23.213179818156034072,
   24.677365158230662297,
   26.246816144951353136,
   27.929572280141353135,
   29.734311922988985123,
   31.670404561119173165,
   33.747967457156887235,
   35.977927043886610355,
   38.372085473421271557,
   40.943192760938172943,
   43.705025001769808275,
   46.672469182228205506,
   49.861615149791187529,
   53.289855357513198052,
   56.975993051096775711,
   60.940359625359948366,
   65.204941940281095176,
   69.793520455855438795,
   74.731819120156894711,
   80.047668026811244388,
   85.771179947146451339,
   91.934941939242029383,
   98.574223341658895163,
   105.7272015745651895,113.4352072961229521,
   121.74299059828217443,
   130.69901007454254022,
   140.3557467538795812,
   150.77004507108036922,
   162.00348323549146241,
   174.12277556906358872,
   187.20020961212696562,201.314121043231962,
   216.5494097294788632,232.9981005180417846,
   250.75995270025172838,
   269.94312242902800291,
   290.66488275123878877,
   313.05240633157101632,
   337.24361639679661202,
   363.3881119223193065,
   391.64817362026537045,
   422.19985787417213767,
   455.23418640392782454,
   490.95844014082528658,
   529.59756655165086172,
   571.39571047835732321,
   616.61787946231155363,
   665.55175550617995622,
   718.5096662996605637,
   775.83073010561641734,
   837.88318977958275773,
   905.06695278779915916,
   977.81635560743623476,
   1056.6031725490976946,
   1141.939890848598711,
   1234.3832758462292157,
   1334.5382522222542164,
   1443.0621296037183367,
   1560.6692034176606548,
   1688.1357646592176357,
   1826.3055552912164131,
   1976.0957093181367953,
   2138.5032232073099733,
   2314.6120032918508474,
   2505.6005421135988845,
   2712.7502803836035425,
   2937.4547163888558586,
   3181.2293302968339082,
   3445.722396947481839,
   3732.7267674229985378,
   4044.1927070012004089,
   4382.2418850849915362,
   4749.1826214206425051,
   5147.5265024389278685,
   5580.0064919497841113,
   6049.5966717739972535,
   6559.5337602930181109,7113.34057043707845,
   7714.8515834180969779,
   8368.2408306630271821,
   9078.0522940416917266,
   9849.2330537489374388,
   10687.169434245187132,
   11597.726421647313449,
   12587.290651073789275,
   13662.817289881719348,
   14831.88117270451855,16102.73257694374629,
   17484.358063145083472,
   18986.546843778951834,
   20619.963186659550743,
   22396.225405909758004,
   24327.992044382670222,
   26429.055907187410481,
   28714.446666878933692,
   31200.542827442068134,
   33905.193906957430934,
   36847.853778359234349,
   40049.726194614726975,
   43533.923619663856845,
   47325.640590312472519,
   51452.342947800902786,
   55943.974401877839558,
   60833.182025888064192,
   66155.562429715935703,
   71949.930519601003911
   };


void testexp(){
	for (int ii=1;ii<=200;ii++) {

	double x=ii/10.0;
	std::cout << std::setprecision(16)<< x << ": " <<  (expIntegral(x) - ref[ii-1])/ref[ii-1] << std::endl;
	}
}

void testHF(){
	for (int ii=1;ii<=200;ii++) {
		double x=ii/10.0;
		std::cout << std::setprecision(16)<< x << ": " <<  (HF111222(x) - refHF[ii-1])/refHF[ii-1] << std::endl;
	}
}


int main(int ac,char** av){


double q02=30.0*30.0;
double q2=50.0*50.0;
double Q2=100.0*100.0;
double Q2ren=45.0*45.0;
int nf=5;
double lambda=0.226242836844;
double lambda2=lambda*lambda;

double d1=numExpSudakovMode2(q02,q2,nf,lambda2);
double d2=numExpSudakovMode2(q2,q2,nf,lambda2);
double d3=numExpSudakovMode2(q02,Q2,nf,lambda2);
double d4=numExpSudakovMode2(Q2,Q2,nf,lambda2);

double n=exp(d2-d1-d4+d3);
MinloInfo MI;
MI.d_useSherpa=true;
MI.d_usePDFalphas=false;

currentPDF::init("ct14nlo",0);

double sref=nll_sudakov_withInfo(MI,q02,Q2,q2,1);
std::cout << "num: " << n << " ref:" << sref << std::endl;
std::cout << "d1: " << d1 << std::endl;
std::cout << "d2: " << d2 << std::endl;
std::cout << "d3: " << d3 << std::endl;
std::cout << "d4: " << d4 << std::endl;
std::cout << "d4-d3: " << d4-d3 << std::endl;
std::cout << "exp(-(d4-d3)): " << exp(d3-d4) << std::endl;

std::cout << "SEQ: " << SherpaExponentQuark(q02,Q2,currentPDF::s_PDF,2,false,5,0.0 /*not relevant*/) << std::endl;
std::cout << "SS: " << SherpaSudakov(q02,Q2,q2,1,currentPDF::s_PDF ,2, 5)<< std::endl;
std::cout << "K: " << KeithSudakov(q02,Q2,q2,1,currentPDF::s_PDF) << std::endl;
std::cout << "exp(-(d4-d3)+(d2-d1)): " << exp(d3-d4-d1+d2) << std::endl;


double d31=numExpSudakovMode3(q02,q2,nf,lambda2);
double d32=numExpSudakovMode3(q2,q2,nf,lambda2);
double d33=numExpSudakovMode3(q02,Q2,nf,lambda2);
double d34=numExpSudakovMode3(Q2,Q2,nf,lambda2);
std::cout << "d1: " << d31 << std::endl;
std::cout << "d2: " << d32 << std::endl;
std::cout << "d3: " << d33 << std::endl;
std::cout << "d4: " << d34 << std::endl;
std::cout << "d4-d3: " << d34-d33 << std::endl;
std::cout << "SEQ: " << SherpaExponentQuark(q02,Q2,currentPDF::s_PDF,3,false,5,0.0 /*not relevant*/) << std::endl;
std::cout << "SS: " << SherpaSudakov(q02,Q2,q2,1,currentPDF::s_PDF ,3, 5)<< std::endl;
std::cout << "exp(-(d4-d3)+(d2-d1)): " << exp(d33-d34-d31+d32) << std::endl;

double g31=numExpSudakovGluonMode3(q02,q2,nf,lambda2);
double g32=numExpSudakovGluonMode3(q2,q2,nf,lambda2);
double g33=numExpSudakovGluonMode3(q02,Q2,nf,lambda2);
double g34=numExpSudakovGluonMode3(Q2,Q2,nf,lambda2);
std::cout << "g1: " << g31 << std::endl;
std::cout << "g2: " << g32 << std::endl;
std::cout << "g3: " << g33 << std::endl;
std::cout << "g4: " << g34 << std::endl;
std::cout << "d4-d3: " << g34-g33 << std::endl;
std::cout << "SEQ: " << SherpaExponentGluon(q02,Q2,currentPDF::s_PDF,3,false,5,0.0 /*not relevant*/) << std::endl;

double g1=numExpSudakovGluonMode2(q02,q2,nf,lambda2);
double g2=numExpSudakovGluonMode2(q2,q2,nf,lambda2);
double g3=numExpSudakovGluonMode2(q02,Q2,nf,lambda2);
double g4=numExpSudakovGluonMode2(Q2,Q2,nf,lambda2);
std::cout << "g1: " << g1 << std::endl;
std::cout << "g2: " << g2 << std::endl;
std::cout << "g3: " << g3 << std::endl;
std::cout << "g4: " << g4 << std::endl;
std::cout << "d4-d3: " << g4-g3 << std::endl;
std::cout << "SEQ: " << SherpaExponentGluon(q02,Q2,currentPDF::s_PDF,2,false,5,0.0 /*not relevant*/) << std::endl;




double s31=numExpSudakovGluonSubMode3(q02,q2,Q2ren,nf,lambda2);
double s32=numExpSudakovGluonSubMode3(q2,q2,Q2ren,nf,lambda2);
double s33=numExpSudakovGluonSubMode3(q02,Q2,Q2ren,nf,lambda2);
double s34=numExpSudakovGluonSubMode3(Q2,Q2,Q2ren,nf,lambda2);
std::cout << "g1: " << s31 << std::endl;
std::cout << "g2: " << s32 << std::endl;
std::cout << "g3: " << s33 << std::endl;
std::cout << "g4: " << s34 << std::endl;
std::cout << "d4-d3: " << s34-s33 << std::endl;
std::cout << "SEQ: " << SherpaExponentGluon(q02,Q2,currentPDF::s_PDF,3,true,5,Q2ren ) << std::endl;
std::cout << "d2-d1: " << s32-s31 << std::endl;
std::cout << "SEQ: " << SherpaExponentGluon(q02,q2,currentPDF::s_PDF,3,true,5,Q2ren ) << std::endl;

double s1=numExpSudakovSubMode3(q02,q2,Q2ren,nf,lambda2);
double s2=numExpSudakovSubMode3(q2,q2,Q2ren,nf,lambda2);
double s3=numExpSudakovSubMode3(q02,Q2,Q2ren,nf,lambda2);
double s4=numExpSudakovSubMode3(Q2,Q2,Q2ren,nf,lambda2);
std::cout << "g1: " << s1 << std::endl;
std::cout << "g2: " << s2 << std::endl;
std::cout << "g3: " << s3 << std::endl;
std::cout << "g4: " << s4 << std::endl;
std::cout << "d4-d3: " << s4-s3 << std::endl;
std::cout << "SEQ: " << SherpaExponentQuark(q02,Q2,currentPDF::s_PDF,3,true,5,Q2ren ) << std::endl;
std::cout << "d2-d1: " << s2-s1 << std::endl;
std::cout << "SEQ: " << SherpaExponentQuark(q02,q2,currentPDF::s_PDF,3,true,5,Q2ren ) << std::endl;

MI.d_useSherpa=true;
MI.d_sherpaMode=2;
MI.d_nfgs=5;
std::cout << "sub Quark mode 2: " << fo_exponent_withInfo(MI,q02,Q2,q2,Q2ren,1) << std::endl;
std::cout << "analytical      : " << analyticSudakovSubQuarkMode2(q02,Q2,q2,Q2ren,lambda2) << std::endl;
std::cout << "sub Gluon mode 2: " << fo_exponent_withInfo(MI,q02,Q2,q2,Q2ren,0) << std::endl;
std::cout << "analytical      : " << analyticSudakovSubGluonMode2(q02,Q2,q2,Q2ren,lambda2) << std::endl;
MI.d_sherpaMode=3;
std::cout << "sub Quark mode 3: " << fo_exponent_withInfo(MI,q02,Q2,q2,Q2ren,1) << std::endl;
std::cout << "analytical      : " << analyticSudakovSubQuarkMode3(q02,Q2,q2,Q2ren,lambda2) << std::endl;
std::cout << "sub Gluon mode 3: " << fo_exponent_withInfo(MI,q02,Q2,q2,Q2ren,0) << std::endl;
std::cout << "analytical      : " << analyticSudakovSubGluonMode3(q02,Q2,q2,Q2ren,lambda2) << std::endl;

}
